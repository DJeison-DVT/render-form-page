// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model QuoteInformation {
  id              String    @id @default(uuid())
  company         String
  approvalContact String
  requestContact  String
  createdAt       DateTime  @default(now()) @db.Timestamp(6)
  updatedAt       DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  finalizedAt     DateTime?
  client          String
  brand           String
  project         String
  serial          String
  stage           Stage
  provider        String

  quotes         Quote[]
  ProviderQuotes ProviderQuotes[]
}

enum Stage {
  QUOTING
  NEGOTIATING
  FINALIZED
}

model Quote {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  rejectedAt    DateTime?
  comment       String?
  createdByRole Role

  quoteInformationId               String
  quoteInformation                 QuoteInformation @relation(fields: [quoteInformationId], references: [id], onDelete: Cascade)
  entries                          Entry[]
  ProviderQuotes                   ProviderQuotes?  @relation(fields: [providerQuotesQuoteInformationId, providerQuotesUserId], references: [quoteInformationId, userId])
  providerQuotesQuoteInformationId String?
  providerQuotesUserId             String?
}

model ProviderQuotes {
  quoteInformationId String
  userId             String
  quotes             Quote[]

  quoteInformation QuoteInformation @relation(fields: [quoteInformationId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([quoteInformationId, userId])
}

model Entry {
  id              Int     @id @default(autoincrement())
  imageUrl        String?
  name            String
  material        String
  materialSubtype String
  sizes           String
  concept         String
  range           String
  unitaryCost     Float?
  unitaryPrice    Float?

  quoteId Int
  quote   Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

enum Role {
  VALIDATOR
  PETITIONER
  PROVIDER
  SUPERVISOR
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String           @id @default(cuid())
  name           String
  company        String?
  phone          String           @unique
  email          String           @unique
  image          String?
  role           Role             @default(PETITIONER)
  password       String
  accounts       Account[]
  sessions       Session[]
  ProviderQuotes ProviderQuotes[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
